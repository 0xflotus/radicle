#!/usr/bin/env radicle
;;
;; Test correctness of the storage interface provided by the server.
;;
;; This script tests that the HTTP server implements the storage protocol with
;; `machine/eval-server/update!` and `machine/eval-server/get-log!` properly.
;;
;; The script accepts the hostname of the server as an optional argument. The
;; hostname defaults to `localhost`. We always use port 8000.
;;


(load! "rad/prelude.rad")

(import prelude/patterns '[/cons] :unqualified)
(import prelude/test '[assert-equal] :unqualified)
(import prelude/test :as 'test)

(def host
  (match (get-args!)
    (/cons 'h _) h
    /nil         "localhost"
  ))

(def create-machine
  (fn []
    (string-append "http://" host ":8000/chains/" (uuid!))
  ))

(def exprs-1 [ :e1 :e2 ])
(def exprs-2 [ :f1 :f2 :f3 ])

(def test/receive-all
  "Passing `:nothing` to `machine/eval-server/get-log!` returns all expressions"
  (fn []
    (def machine-id (create-machine))
    (machine/eval-server/update! machine-id exprs-1)
    (machine/eval-server/update! machine-id exprs-2)
    (def all-exprs (<> exprs-1 exprs-2))
    (match (machine/eval-server/get-log! machine-id :nothing)
      [_ 'received-exprs] (assert-equal received-exprs all-exprs))
  ))

(def test/receive-last-index
  (fn []
    "Passing the last index from `machine/eval-server/update!` to `machine/eval-server/get-log!` returns no expressions"
    (def machine-id (create-machine))
    (def index (machine/eval-server/update! machine-id exprs-1))
    (match (machine/eval-server/get-log! machine-id [:just index])
      [_ 'received-exprs] (assert-equal received-exprs []))
  ))

(def test/receive-with-index
  (fn []
    "Passing an index from `machine/eval-server/update!` to `machine/eval-server/get-log!` returns no expressions"
    (def machine-id (create-machine))
    (def index (machine/eval-server/update! machine-id exprs-1))
    (machine/eval-server/update! machine-id exprs-2)
    (match (machine/eval-server/get-log! machine-id [:just index])
      [_ 'received-exprs] (assert-equal received-exprs exprs-2))
  ))

(def test/receive-returns-sent-index
  "`machine/eval-server/get-log!` returns the last sent index"
  (fn []
    (def machine-id (create-machine))
    (def index-send (machine/eval-server/update! machine-id exprs-1))
    (match (machine/eval-server/get-log! machine-id :nothing)
      ['index-receive _] (assert-equal index-receive index-send))
  ))


(test/run-all (test/make-suite "server-machine-backend" {
  "receive-all" test/receive-all
  "receive-last-index" test/receive-last-index
  "receive-with-index" test/receive-with-index
  "receive-returns-sent-index" test/receive-returns-sent-index
  }))
