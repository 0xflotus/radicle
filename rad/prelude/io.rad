;; read-line
(def read-line!
  "Read a single line of input and interpret it as radicle data."
  (fn [] (read (get-line!))))

(def read-code!
  (fn [filename]
    (read-many (read-file! filename))))

(document 'read-code!
          '("filename" string)
          "Read code (as data) from a file. Returns a vector of expressions")

(def send-code!
  (fn [chain-id filename]
    (send! chain-id (read-code! filename))))

(document 'send-code!
          '(("chain-id" string) ("filename" string))
          "Send code from a file to a remote chain.")

(def print!
  "Print a value to the console or stdout."
  (fn [x]
    (put-str! (show x))))

(def shell!
  "(shell! command stdin) executes 'command' using the shell with 'to-write' as
   input. Returns the exit code. Stdout and stderr are inherited.
   Example: (shell! \"ls -Glah\" \"\")
   "
  (fn [command to-write]
    (def cp
      { :cmdspec [:shell command]
        :stdin :create-pipe
        :stdout :inherit
        :stderr :inherit
      })
    (match (system! cp)
      [[:just 'stdin] :nothing :nothing 'ph] (do (write-handle! stdin to-write)
                                                 (wait-for-process! ph))
      _ (throw 'io-error "expected only stdin to be open"))))

;; (def shell-with-stdout!
;;   "(shell-with-stdout! command stdin) executes 'command' using the shell with
;;    'stdin' as input. Returns the exit code. Stderr is inherited.
;;    Example: (shell! \"ls -Glah\" \"\")
;;    "
;;   (fn [command stdin]
;;     (def cp
;;       { :cmdspec [:shell command]
;;         :stdin :create-pipe
;;         :stdout :create-pipe
;;         :stderr :inherit
;;       })
;;     (match (system! cp)
;;       [[:just 'stdin] [:just 'stdout] :nothing 'ph]
;;           (do (write-handle! stdin to-write)
;;               (read-line-handle
;;               (wait-for-process! ph))
;;       _ (throw 'io-error "expected only stdin to be open"))))

(def process!
  "(process! command args to-write) executes 'command' using 'execvp'. with 'to-write' as
   input. Returns the exit code.
   Example: (process! \"ls\" [\"-Glah\"] \"\"
  "
  (fn [command args to-write]
    (def cp
      { :cmdspec [:raw command args]
        :stdin :create-pipe
        :stdout :inherit
        :stderr :inherit
      })
    (match (system! cp)
      [[:just 'stdin] :nothing :nothing 'ph] (do (write-handle! stdin to-write)
                                                 (wait-for-process! ph))
      _ (throw 'io-error "expected only stdin to be open"))))
