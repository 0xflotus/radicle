(load! "rad/prelude.rad")

;; The Repl


(def _initial_prompt-text
  "Welcome to radicle. Type (help) for help.")

(def help (fn []
  "radicle is a LISP-like language intended for programming chains, and interacting with those chains.

  Type (doc '<name>) for further documentation of <name>."))

(def render-exception! (fn [e stack]
  (put-str! (string-append "Exception: " (show e)))
  (for-each-vec stack put-str!)))

(def read-line-or-exit! (fn []
  (def line (get-line!))
  (if (eq? line nil)
      (exit!)
      (read line))))

(def repl (fn []
  (def-rec repl-rec (fn [st]
    (def line (get-line! st))
    (def res
        (if (eq? line nil)
            (exit!)
            (eval (read line) st)))
    (print! (head res))
    (repl-rec (nth 1 res))))
  (repl-rec (get-current-env))))

(repl)
