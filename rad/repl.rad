(load! "rad/prelude.rad")

;; The Repl


(def _initial_prompt-text
  "Welcome to radicle. Type (help) for help.")

(def help (fn []
  "radicle is a LISP-like language intended for programming chains, and interacting with those chains.

  Type (doc '<name>) for further documentation of <name>."))

(def repl (fn []
  (def-rec repl-rec (fn [st]
    (def line (get-expression! (keys (lookup :env st))))
    (def cur-eval (nth 1 (lookup 'eval (lookup :env st))))
    (if (eq? line nil)
        nil
        (catch 'any (do (def ret (cur-eval (read line) st))
                        (print! (head ret))
                        (repl-rec (head (tail ret))))
                (fn [e] (put-str! (string-append "Exception " (show e)))
                        (repl-rec st))))))
  (repl-rec (get-current-env))))

(repl)
