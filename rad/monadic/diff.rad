(load! (find-module-file! "prelude.rad"))

(import prelude/lens :unqualified)
(import prelude/machine '[send-code!] :unqualified)
(import prelude/time '[install-fake-clock] :unqualified)
(import prelude/io :as 'io)

(def radicle-diff-machine-id
  "The name of this machine."
  "monadic/radicle/diffs")

(def create-diffs-machine!
  "Create a remote diff machine. Returns the machine id"
  (fn []
    (def id (machine/new-machine!))
    (machine/send-prelude! id)
    (send-code! id (find-module-file! "monadic/diff-remote.rad"))
    id))

(def simple-diff
  "Create an open diff with no comments or labels."
  (fn [p]
  (def t (now!))
  (<> {:state       :pending
      :comments    []
      :created-at  t
      :modified-at t}
     p)))

(def simple-comment
  "Create a comment for an issue."
  (fn [diff-number bod author-name]
   (def t (now!))
   {:body         bod
    :author-name  author-name
    :diff-number  diff-number
    :created-at   t
    :modified-at  t}))

(def edit-diff!
 "Edit a remote diff with the keys in `my-keys.rad`."
 (fn [machine i]
   (machine/send-signed-command! machine radicle-diff-machine-id 'edit-diff i)))

(def simple-edit-diff!
 (fn [machine n i]
   (edit-diff! machine
                (<> {:diff-number n
                     :modified-at (now!)}
                    i))))

(def create-diff!
 "Create a new remote diff with the keys in `my-keys.rad`."
 (fn [machine i]
 (machine/send-signed-command! machine radicle-diff-machine-id 'create-diff i)))

(def add-comment!
  "Create a remote comment with the keys in `my-keys.rad`."
  (fn [machine c]
   (machine/send-signed-command! machine radicle-diff-machine-id 'add-comment c)))

(def simple-create-diff!
  "Create a remote diff with sensible defaults."
  (fn [machine diff]
    (create-diff! machine (simple-diff diff))))

(def simple-add-comment!
  "Create a remote comment."
  (fn [machine n b name]
    (add-comment! machine (simple-comment n b name))))

(def list-diffs
  "Return the full map of diffs."
  (fn [machine]
  (machine/query! machine '(list-diffs))))

(def recent-activity
  "Returns the activity on the machine since a timestamp."
  (fn [machine from]
    (def mod-at
      (fn [x]
        (unix-epoch
         (lookup :modified-at x))))
    (def u (unix-epoch from))
    (def since
      (fn [xs]
        (filter (fn [x] (< u (mod-at x))) xs)))
    (def most-recent-first
      (fn [xs]
        (sort-by (fn [x] (- 0 (mod-at x)))
                 xs)))
    (def all-diffs (values (list-diffs machine)))
    (def is (map (fn [i]
                   {:activity    :new-diff
                    :modified-at (lookup :modified-at i)
                    :diff        i})
                 (since all-diffs)))
    (def cs
      (cat-maybes
       (map (fn [i]
              (def xs (most-recent-first (since (lookup :comments i))))
              (if (eq? xs [])
                :nothing
                [:just
                 {:activity    :new-comments
                  :modified-at (lookup :modified-at (first xs))
                  :diff        i}]))
            all-diffs)))
    (most-recent-first (<> is cs))))

(:test
 "The monadic diffs machine works."
 [:setup
  (do (machine/install-remote-machine-fake)
      (install-fake-clock)
      (io/install-fake-filesystem!
        { "../my-keys.rad" (show (gen-key-pair! (default-ecc-curve)))
        })
      (def machine (create-diffs-machine!))
      (simple-create-diff! machine {:title "title0" :description "desc0" :patch "patch0"})
      (simple-create-diff! machine {:title "title1" :description "desc1" :patch "patch1"})
      (simple-add-comment! machine 0 "comment0" "name0")
      (simple-add-comment! machine 1 "comment1" "name1")
      (simple-edit-diff! machine 0 {:state :accepted})
      (def t (now!))
      (simple-create-diff! machine {:title "new" :description "new" :patch "new"})
      (simple-create-diff! machine {:title "newer" :description "newer" :patch "newer"})
      (simple-add-comment! machine 0 "new" "name0")
      (def diffs (list-diffs machine))
      (def new (recent-activity machine t)))]
   [ (length (seq diffs)) ==> 4 ]
   [ (view (.. (@ 0) (@ :title)) diffs) ==> "title0" ]
   [ (view (.. (@ 1) (@ :title)) diffs) ==> "title1" ]
   [ (view (... [(@ 1) (@ :comments) (@nth 0) (@ :body)]) diffs) ==> "comment1" ]
   [ (view (.. (@ 0) (@ :state)) diffs) ==> :accepted ]
   [ (length new) ==> 3 ]
   [ (view (.. (@nth 0) (@ :activity)) new) ==> :new-comments ]
   [ (view (... [(@nth 1) (@ :diff) (@ :title)]) new) ==> "newer" ]
 )
